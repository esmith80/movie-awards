{"version":3,"sources":["SearchListItem.jsx","SearchList.jsx","NominationListItem.jsx","NominationList.jsx","SearchBarResultItem.jsx","helpers.js","SearchBarResults.jsx","SearchBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchListItem","id","nominate","remove","nominee","maxNomsReached","poster","title","year","className","src","includes","alt","onClick","disabled","SearchList","scrollLoop","movies","lastSearchTerm","getMovies","handlePageChange","searchPage","setInSearchArea","setShowSearchResults","scrolling","lastOffPagePx","handleScroll","clearInterval","setInterval","offPagePxBelow","document","getElementById","scrollHeight","window","innerHeight","scrollY","useEffect","addEventListener","removeEventListener","searchListItems","i","length","push","imdbID","Title","Year","Poster","onMouseEnter","onMouseLeave","NominationListItem","height","width","NominationList","nominees","nomListItems","SearchBarResultItem","setSearchText","setShowTypeAhead","startsWith","scrollTo","removeCharsAndSpaces","string","disallowedChars","result","badChar","regex","RegExp","replace","removeExtraSpaces","SearchBarResults","searchText","setInTypeAhead","useState","typeAheadResults","setTypeAheadResults","s","a","axios","get","response","searchResults","data","Search","titles","item","typeAheadTimeOut","runNewTypeAhead","clearTimeout","setTimeout","getTypeAheadResults","results","map","index","SearchBar","showTypeAhead","inTypeAhead","onBlur","onFocus","action","onSubmit","e","preventDefault","placeholder","type","name","value","onKeyUp","key","trim","onChange","require","App","localNoms","localStorage","nom","match","JSON","parse","setMovies","noResults","setNoResults","setLastSearchTerm","setNominees","setSearchPage","inSearchArea","showSearchResults","navigator","maxTouchPoints","onMobile","setShowMessage","idRemove","removeItem","newNomList","movie","searchTerm","pageToReturn","concat","console","error","setItem","stringify","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7304957a.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SearchListItem = ({ id, nominate, remove, nominee, maxNomsReached, poster, title, year }) => {\n\n  return (\n    <div className='search-item'>\n      <div className='search-item-text'>\n      <span >{nominee ? '🏆 ' : \"\"}</span>{`${title} (${year})`}\n      </div>\n      {/* <div className='search-nom-button-container'> */}\n        <img className='search-poster' src={(poster.includes('jpg')) ? poster : 'https://www.kirkstall.com/wp-content/uploads/2020/04/image-not-available-png-8.png'} alt={title} />\n        \n      {/* </div> */}\n      { maxNomsReached && !nominee ? <button className='search-nom-disabled'><span className='disabled-text'>Nominate</span></button> :\n\n        <button className={nominee ? 'search-remove-button' : 'search-nom-button'}\n        onClick={() => {\n          if(!nominee) {\n            nominate(title, year, id, poster);\n          } else {\n            remove(id);\n          }\n        }}\n        disabled={!nominee && maxNomsReached}>{nominee ? 'Remove' : 'Nominate'}\n        </button>\n      }\n    </div>\n  );\n};","import React, { useEffect } from 'react';\nimport { SearchListItem } from './SearchListItem';\n\nfunction SearchList({ nominate, remove, movies, maxNomsReached, lastSearchTerm, getMovies, handlePageChange, searchPage, setInSearchArea, setShowSearchResults }) {\n\n\n  let scrolling = false;\n  let scrollLoop;\n  let lastOffPagePx = 0;\n\n  function handleScroll() {\n    scrolling = true;\n    // TODO have this code reviewed - is this the way to implement clearing the interval (included of logic of cancelling the event handler and also clearing it if a new one is to be set up?)\n    if (scrollLoop) clearInterval(scrollLoop);\n    scrollLoop = setInterval(() => {\n      if (scrolling) {\n        scrolling = false;\n        // pageHeight is entire height of the page (even if it's off screen)\n        const pageHeight = document.getElementById('root').scrollHeight;\n        const offPagePxBelow = pageHeight - window.innerHeight - window.scrollY;\n        lastOffPagePx = offPagePxBelow;\n\n        // lastOffPagePx condition is so event only triggers when scrolling down\n        if (offPagePxBelow < 10 && offPagePxBelow <= lastOffPagePx) {\n          getMovies(lastSearchTerm + '*', searchPage + 1);\n          // TODO reset search page if movie results\n          handlePageChange(searchPage + 1);\n        }\n      }\n    }, 250);\n\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    // returning the cleanup function will ensure that next time this useEffect runs, the cleanup function from the previous render will already be available to remove the listener??\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      clearInterval(scrollLoop);\n    }\n  });\n\n  // TODO possible refactor - why build this each time, can't we just pass down an array?\n  const searchListItems = [];\n  for (let i = 0; i < movies.length; i++) {\n    // make an array of SearchListItems\n    if (movies[i]) {\n      searchListItems.push(\n        <SearchListItem\n          key={i}\n          id={movies[i].imdbID}\n          title={movies[i].Title}\n          year={movies[i].Year}\n          poster={movies[i].Poster}\n          nominate={nominate}\n          remove={remove}\n          nominee={movies[i].nominee}\n          maxNomsReached={maxNomsReached}\n        />);\n    }\n  }\n\n  return (\n    \n    <div className='search-container'\n      onMouseEnter={() => {\n        setInSearchArea(true);\n      }}\n      onMouseLeave={() => {\n        setInSearchArea(false);\n      }}\n    >\n      <div className=\"close-control\"\n      onClick={() => {\n        setShowSearchResults(false);\n      }}\n      >&#10006;</div>\n\n      {searchListItems}\n\n    </div>\n  );\n}\n\nexport default SearchList;","import React from 'react';\n\nexport const NominationListItem = ({ poster, remove, imdbID, title }) => {\n\n  //TODO make the movie bigger when hovered over\n  // const [mouseOver, setMouseOver] = useState(false);\n\n  return (\n    <>\n      <div className='nom-item'>\n        <img className='poster' src={(poster.includes('jpg')) ? poster : 'https://www.kirkstall.com/wp-content/uploads/2020/04/image-not-available-png-8.png'} alt={title} />\n        <img className='nom-remove-control' onClick={() => { remove(imdbID) }} src=\"https://cdn1.iconfinder.com/data/icons/bold-purple-part1/32/84_Close_Remove_Circle_Cross_Delete-512.png\" height=\"20\" width=\"20\" alt=\"delete\" />\n      </div>\n    </>\n  );\n};","import React from 'react';\nimport { NominationListItem } from './NominationListItem';\n\nfunction NominationList({ remove, nominees }) {\n\n  const nomListItems = [];\n  for (let i = 0; i < nominees.length; i++) {\n    // make an arry of nomListItems\n    nomListItems.push(\n      <NominationListItem\n        key={i}\n        imdbID={nominees[i].imdbID}\n        title={nominees[i].Title}\n        year={nominees[i].Year}\n        poster={nominees[i].Poster}\n        remove={remove}\n      />);\n  }\n\n  return (\n    <div className='nom-container'>\n      {nomListItems}\n    </div>\n  );\n};\n\nexport default NominationList;","import React from 'react';\n\nconst SearchBarResultItem = ({ title, setSearchText, getMovies, setShowTypeAhead }) => {\n  return (\n    <div className='searchbar-result-item'\n      onClick={() => {\n        if (!title.startsWith(\"no results for \")) setSearchText(title);\n        // TODO if the title contains certain characters (minus sign, ampersand, it will return no search results) state here, search text that is clicked is not the actual movie\n        window.scrollTo(0, 0);\n        getMovies(title, 1);\n        setShowTypeAhead(false);\n      }}\n    >\n\n      { title}\n    </div>\n  );\n};\n\nexport default SearchBarResultItem;","const removeExtraSpaces = (string) => {\n  return string.replace(/ {2,}/g, ' ')\n\n}\n\n// takes a string and an array of characters that need to be removed from the string\n// returns the string without those characters\nconst removeCharsAndSpaces = (string, disallowedChars) => {\n  let result = string;\n  for (let badChar of disallowedChars) {\n    // TODO if character is + or * or other special regex character, breaks function\n    let regex = new RegExp(`${badChar}`, 'g');\n    result = result.replace(regex, '');\n  }\n  result = removeExtraSpaces(result);\n  return result;\n\n};\n\nexport default removeCharsAndSpaces;","import { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SearchBarResultItem from './SearchBarResultItem';\nimport removeCharsAndSpaces from './helpers';\n\n\nfunction SearchBarResults({ searchText, setSearchText, setShowTypeAhead, getMovies, setInTypeAhead }) { // will this component automatically re render when searchText is changed?\n\n  const [typeAheadResults, setTypeAheadResults] = useState([]);\n\n\n  async function getTypeAheadResults(s) {\n    s = removeCharsAndSpaces(s, ['&', '-']);\n\n    // TODO Hide API KEY\n    // the API only returns 10 results at a time\n    const response = await axios.get(`https://www.omdbapi.com/?s=${s}*&type=movie&page=1&apikey=bbde90f3`);\n    let searchResults = response.data.Search;\n    if (searchResults) {\n      const titles = [];\n      for (const item of searchResults) {\n        titles.push(item.Title);\n      }\n      setTypeAheadResults(titles);\n    } else {\n      setTypeAheadResults([`no results for \"${searchText}\"`]);\n    }\n  };\n  let runNewTypeAhead = false;\n  let typeAheadTimeOut;\n\n  useEffect(() => {\n    const handleTextChange = (s) => {\n      runNewTypeAhead = true;\n      // debounce: Grouping a sudden burst of events (like keystrokes) into a single one.\n      // how would you implment that? how would you group that burst?\n      // wait 3 seconds, double check that last search term is different from current search term, then run getTypeAheadResults\n      if (typeAheadTimeOut) clearTimeout(typeAheadTimeOut);\n      typeAheadTimeOut = setTimeout(() => {\n        if (runNewTypeAhead) {\n          runNewTypeAhead = false;\n          getTypeAheadResults(s);\n        }\n      }, 200);\n      // TODO adjust this test code which only allows additional search if entire text is deleted\n      // search only runs again if the search terms is deleted entirely before something new is\n      // TODO need conditions to check \n      // 1) when to run first search \n      // 2) when to rerun search \n      // 3) variable to track if current searchText returns a result\n    };\n    // code to run when the prop searchText changes\n    handleTextChange(searchText);\n    return () => {\n      clearTimeout(typeAheadTimeOut);\n    }\n    // this will run getTypeAhead with every single keystroke (even backspaces - how do I change this to only run once every few seconds?)\n  }, [searchText, typeAheadTimeOut]);\n\n  const results = typeAheadResults.map((title, index) => {\n    return (\n      <SearchBarResultItem\n        key={index}\n        title={title}\n        setSearchText={setSearchText}\n        setInTypeAhead={setInTypeAhead}\n        setShowTypeAhead={setShowTypeAhead}\n        getMovies={getMovies}\n      />\n    )\n  });\n\n\n  return (\n    <>\n    \n      <div\n        className='searchbar-results'\n        onMouseEnter={() => {\n          setInTypeAhead(true);\n        }}\n        onMouseLeave={() => {\n          setInTypeAhead(false);\n        }}\n      >\n        <div className=\"close-control-typeahead\"\n      onClick={() => {\n        setShowTypeAhead(false);\n      }}\n      >&#10006;</div>\n        {results}\n      </div>\n    </>\n  );\n};\n\nexport default SearchBarResults;","import { React, useState } from 'react';\nimport SearchBarResults from './SearchBarResults'\n\nconst SearchBar = ({ getMovies, setInSearchArea }) => {\n\n  const [searchText, setSearchText] = useState('');\n  const [showTypeAhead, setShowTypeAhead] = useState(false);\n  const [inTypeAhead, setInTypeAhead] = useState(false);\n\n  return (\n    <div className='searchbar'\n      onMouseEnter={() => {\n        setInSearchArea(true);\n      }}\n      onMouseLeave={() => {\n        setInSearchArea(false);\n      }}>\n      <div\n        className='input-search-results-container'\n        onBlur={() => {\n          if (!inTypeAhead) setShowTypeAhead(false);\n        }} // if you hideTypeAhead onBlur the instant you leave the search input field, you lose the typeahead results and so you can't click on them\n        onFocus={() => {\n          setShowTypeAhead(true)\n        }}\n\n\n\n      >\n        <form action=\".\" onSubmit={(e)=> {\n          e.preventDefault();}\n        }>\n\n        <input\n          placeholder='Search for a movie to nominate...'\n          id='search-text'\n          type='search'\n          name='search-text'\n          value={searchText}\n          //TODO the searches from Enter and Search button should only run if the text entered is new and has not been already displayed\n          //TODO the search should return only a limited amount of results, i think... not infinite scroll? or maybe it could if the infinite scroll stayed in a fixed area\n          //TODO (only run if there is a new search term)\n          onKeyUp={e => {\n            if (e.key === 'Enter' && searchText.trim().length) {\n              \n              setShowTypeAhead(false);\n              window.scrollTo(0, 0);\n              getMovies(searchText + '*', 1); // number 1 has to be used because if these buttons are being hit the user needs new results - not necessarily... if they hit it twice to start then they should get 2 pages?\n            }\n          }}\n          onChange={() => { setSearchText(document.getElementById('search-text').value) }\n        }\n        />\n        </form>\n        {/* TODO don't display SearchBarResults at all if nothing is typed in, or if there is a new text IS USING a ternary with null OK? */}\n        {searchText.trim().length > 2 && showTypeAhead ? <SearchBarResults\n          setSearchText={setSearchText}\n          searchText={searchText.trim()}\n          setShowTypeAhead={setShowTypeAhead}\n          getMovies={getMovies}\n          setInTypeAhead={setInTypeAhead}\n        /> : null}\n\n      </div>\n      <button id=\"btn-search\" onClick={() => {\n        if (searchText.trim().length) {\n          window.scrollTo(0, 0);\n          getMovies(searchText.trim() + '*', 1);\n        }\n      }}>Search</button>\n    </div>\n  );\n};\n\nexport default SearchBar;","import { React, useState } from 'react';\nimport './App.css';\nimport SearchList from './SearchList';\nimport NominationList from './NominationList';\nimport SearchBar from './SearchBar';\nimport Banner from './Banner';\nimport removeCharsAndSpaces from './helpers';\nconst axios = require('axios');\n\n\nfunction App() {\n  // localStorage will hold user's nomination if they've visited website before\n  // go through each item in local storage. if the key is an imdbID, put it in the nominees array  \n  const localNoms = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    let key = localStorage.key(i);\n    let nom = localStorage[key];\n    if (key.match(/tt\\d{7}/g)) {\n      nom = JSON.parse(nom);\n      localNoms.push(nom)\n    }\n  }\n\n  const [movies, setMovies] = useState({});\n  const [noResults, setNoResults] = useState(false);\n  const [lastSearchTerm, setLastSearchTerm] = useState('');\n  const [nominees, setNominees] = useState(localNoms.length ? localNoms : []);\n  const [searchPage, setSearchPage] = useState(1);\n  const [inSearchArea, setInSearchArea] = useState(false);\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [onMobile, setOnMobile] = useState(navigator.maxTouchPoints);\n  const [showMessage, setShowMessage] = useState(false);\n\n\n\n  const nominate = (Title, Year, imdbID, Poster) => {\n    const nominee = {\n      Title,\n      Year,\n      imdbID,\n      Poster\n    };\n    setNominees([...nominees, nominee]);\n    if(nominees.length === 4) setShowMessage(true);\n\n    localStorage.setItem(imdbID, JSON.stringify(nominee));\n\n    for (let movie of movies) {\n      if (movie.imdbID === imdbID) {\n        movie.nominee = true;\n        break;\n      }\n    }\n  }\n\n  const remove = (idRemove) => {\n\n    for (let i = 0; i < localStorage.length; i++) {\n      let key = localStorage.key(i);\n      let nom = localStorage[key];\n      if (nom.includes(idRemove)) {\n        localStorage.removeItem(key);\n        break;\n      }\n    }\n\n    const newNomList = [];\n    for (let nominee of nominees) {\n      if (nominee.imdbID !== idRemove) {\n        newNomList.push(nominee);\n      }\n    }\n    if (movies.length) {\n      for (let movie of movies) {\n        if (movie.imdbID === idRemove) {\n          movie.nominee = false;\n          break;\n        }\n      }\n    }\n    setNominees(newNomList);\n    if(nominees.length === 4) setShowMessage(true);\n  }\n\n  // get movies from database and set the results to searchResults\n  async function getMovies(searchTerm, pageToReturn) {\n    searchTerm = removeCharsAndSpaces(searchTerm, ['&', '-']);\n    setShowSearchResults(true);\n    // setInSearchArea(true);\n    // the incoming pageToReturn informs us if the user has triggered a brand new search (even if the search is with the same search text as before)\n    if (pageToReturn === 1) {\n      setSearchPage(1);\n    }\n    try {\n      // TODO Hide API KEY\n      // the API only returns 10 results at a time\n      const response = await axios.get(`https://www.omdbapi.com/?s=${searchTerm}&type=movie&page=${pageToReturn}&apikey=bbde90f3`);\n      let searchResults = response.data.Search;\n      // TODO use the result count? total amount of results are known for a search term on the first query\n      // const resultCount = response.data.totalResults;\n\n      // TODO if no results, search results is not iterable\n      for (let item of searchResults) {\n        // TODO setting nominee causes console error and no results returned sometimes even though there should be results\n        if (item) {\n          item.nominee = false;\n          for (let nominee of nominees) {\n            if (item.imdbID === nominee.imdbID) {\n              item.nominee = true;\n            }\n          }\n        }\n      }\n      setLastSearchTerm(searchTerm.replace('*', '').trim());\n      if (pageToReturn === 1) {\n        // TODO calling getMovies also sets the results in the search area - should getting the results and setting them be seperated as getting results can be used differently \n        setMovies(searchResults);\n\n      } else {\n        searchResults = movies.concat(searchResults);\n        setMovies(searchResults);\n      }\n      setNoResults(!searchResults.length);\n    } catch (error) {\n      // TODO console error if search results not iterable; need message to user that they've reached the end of the results\n      console.error(error);\n    }\n  }\n\n  \n\n  return (\n    <div className=\"App\"\n    onClick={() => {\n      if (!inSearchArea && showSearchResults) {\n        window.scrollTo(0, 0);\n        setShowSearchResults(false);\n      }\n    }}>\n\n      {onMobile ? <div className=\"turnDeviceNotification\"></div> : null}\n      <div className=\"noms-title-search-container\">\n        <h1 className=\"title\">Shoppies</h1>\n        {showSearchResults ? <div></div> : \n          nominees.length === 5 ? \n          <div className=\"instructions\">\n            <h2>Here are your nominees!</h2>\n            <h3>(To change your nominees, use the remove controls.)</h3>\n          </div>\n          : \n          <div className=\"instructions\">\n            <h2>Choose 5 movies to nominate for a Shoppie award!</h2>\n            <h3>You have <span>{5 - nominees.length}</span> {5 - nominees.length === 1 ? \"nomination\" : \"nominations\"} left.</h3>\n          </div>\n        }\n        <SearchBar\n          setInSearchArea={setInSearchArea}\n          getMovies={getMovies}\n          setMovies={setMovies}\n          searchPage={searchPage}\n          setSearchPage={setSearchPage} />\n      </div>\n\n      {\n        nominees.length ?\n          <NominationList\n            className='nom-container'\n            remove={remove}\n            nominees={nominees}\n          /> :\n          <div className='nom-container'></div>\n      }\n\n\n      {\n        movies.length && showSearchResults ?\n          <SearchList\n            nominate={nominate}\n            remove={remove}\n            movies={movies}\n            maxNomsReached={nominees.length === 5}\n            lastSearchTerm={lastSearchTerm}\n            getMovies={getMovies}\n            setInSearchArea={setInSearchArea}\n            setShowSearchResults={setShowSearchResults}\n            handlePageChange={(p) => {\n              setSearchPage(p);\n            }}\n            searchPage={searchPage}\n          /> :\n          noResults ?\n            <div className='search-container'>\n              Sorry, we could not find '{lastSearchTerm}'\n        </div> :\n            <div className='search-container'></div>\n      }\n\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}