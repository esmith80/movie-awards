{"version":3,"sources":["SearchListItem.jsx","SearchList.jsx","NominationListItem.jsx","NominationList.jsx","SearchBarResultItem.jsx","SearchBarResults.jsx","SearchBar.jsx","Banner.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchListItem","id","nominate","nominee","maxNomsReached","poster","title","year","onClick","disabled","SearchList","scrollLoop","movies","lastSearchTerm","getMovies","handlePageChange","searchPage","scrolling","lastOffPagePx","handleScroll","clearInterval","setInterval","offPagePxBelow","document","getElementById","scrollHeight","window","innerHeight","scrollY","useEffect","addEventListener","removeEventListener","searchListItems","i","length","push","imdbID","Title","Year","Poster","console","log","className","NominationListItem","props","src","includes","alt","remove","NominationList","nominees","nomListItems","SearchBarResultItem","SearchBarResults","searchText","useState","typeAheadResults","setTypeAheadResults","s","a","axios","get","response","searchResults","data","Search","titles","item","typeAheadTimeOut","runNewTypeAhead","clearTimeout","setTimeout","getTypeAheadResults","results","map","index","SearchBar","setSearchText","showTypeAhead","setShowTypeAhead","placeholder","type","name","value","onKeyUp","e","key","trim","onChange","onBlur","onFocus","Banner","require","App","localNoms","localStorage","nom","match","JSON","parse","setMovies","noResults","setNoResults","setLastSearchTerm","setNominees","setSearchPage","searchTerm","pageToReturn","replace","concat","error","idRemove","removeItem","newNomList","movie","setItem","stringify","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.21743148.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SearchListItem = ({ id, nominate, nominee, maxNomsReached, poster, title, year }) => {\n\n  return (\n    <>\n      <tr>\n        <td>{title}</td>\n        <td>{year}</td>\n        <td>\n          <button\n            onClick={() => {\n              nominate(title, year, id, poster);\n            }}\n            disabled={nominee || maxNomsReached}>{nominee ? 'üèÜ' : 'Nominate'}\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport { SearchListItem } from './SearchListItem';\n\nfunction SearchList({ nominate, movies, maxNomsReached, lastSearchTerm, getMovies, handlePageChange, searchPage }) {\n\n  let scrolling = false;\n  let scrollLoop;\n  let lastOffPagePx = 0;\n\n  function handleScroll() {\n    scrolling = true;\n    // TODO have this code reviewed - is this the way to implement clearing the interval (included of logic of cancelling the event handler and also clearing it if a new one is to be set up?)\n    if (scrollLoop) clearInterval(scrollLoop);\n    scrollLoop = setInterval(() => {\n      if (scrolling) {\n        scrolling = false;\n        // pageHeight is entire height of the page (even if it's off screen)\n        const pageHeight = document.getElementById('root').scrollHeight;\n        const offPagePxBelow = pageHeight - window.innerHeight - window.scrollY;\n        lastOffPagePx = offPagePxBelow;\n\n        // lastOffPagePx condition is so event only triggers when scrolling down\n        if (offPagePxBelow < 10 && offPagePxBelow <= lastOffPagePx) {\n          getMovies(lastSearchTerm + '*', searchPage + 1);\n          // TODO reset search page if movie results\n          handlePageChange(searchPage + 1);\n        }\n      }\n    }, 250);\n\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    // returning the cleanup function will ensure that next time this useEffect runs, the cleanup function from the previous render will already be available to remove the listener??\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      clearInterval(scrollLoop);\n    }\n  });\n\n  // TODO possible refactor - why build this each time, can't we just pass down an array?\n  const searchListItems = [];\n  for (let i = 0; i < movies.length; i++) {\n    // make an arry of SearchListItems\n    if (movies[i]) {\n      searchListItems.push(\n        <SearchListItem\n          key={i}\n          id={movies[i].imdbID}\n          title={movies[i].Title}\n          year={movies[i].Year}\n          poster={movies[i].Poster}\n          nominate={nominate}\n          nominee={movies[i].nominee}\n          maxNomsReached={maxNomsReached}\n        />);\n    }\n  }\n  console.log('SEARCH LIST RENDER')\n\n  return (\n    <div className='search-container'>\n      <table>\n\n        <thead>\n          <tr>\n            <th>Search Results ({searchListItems.length})</th>\n          </tr>\n          <tr>\n            <th>Title</th>\n            <th>Year</th>\n          </tr>\n        </thead>\n        <tbody>\n          {searchListItems}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SearchList;","import React from 'react';\n\nexport const NominationListItem = (props) => {\n\n  return (\n    <>\n      <div className='nom-item'>\n        <img className='poster' src={(props.poster.includes('jpg')) ? props.poster : 'https://www.kirkstall.com/wp-content/uploads/2020/04/image-not-available-png-8.png'} alt={props.title} />\n        <button className='nom-button' onClick={() => { props.remove(props.imdbID) }}>Remove</button>\n      </div>\n      {/* <tr>\n        <td>{props.title}</td>\n        <td>{props.year}</td>\n        <td><img class='poster' src={props.poster}/></td>\n        <td><button onClick={() => { props.remove(props.imdbID) }}>Remove</button></td>\n      </tr> */}\n    </>\n  );\n};","import React from 'react';\nimport { NominationListItem } from './NominationListItem';\n\nfunction NominationList(props) {\n\n  const { remove, nominees } = props;\n\n  const nomListItems = [];\n  for (let i = 0; i < nominees.length; i++) {\n    // make an arry of nomListItems\n    nomListItems.push(\n      <NominationListItem\n        key={i}\n        imdbID={nominees[i].imdbID}\n        title={nominees[i].Title}\n        year={nominees[i].Year}\n        poster={nominees[i].Poster}\n        remove={remove}\n      />);\n  }\n\n  return (\n    <div className='nom-container'>\n      {nomListItems}\n    </div>\n  );\n};\n\nexport default NominationList;","import React from 'react';\n\nconst SearchBarResultItem = ({ title }) => {\n  return (\n    <div className='searchbar-result-item'>\n      {title}\n    </div>\n  );\n};\n\nexport default SearchBarResultItem;","import { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SearchBarResultItem from './SearchBarResultItem';\n\n\nfunction SearchBarResults({ searchText }) { // will this component automatically re render when searchText is changed?\n\n  const [typeAheadResults, setTypeAheadResults] = useState([]);\n\n\n  async function getTypeAheadResults(s) {\n    console.log('call API - searchText: ', searchText)\n    // TODO Hide API KEY\n    // the API only returns 10 results at a time\n    const response = await axios.get(`https://www.omdbapi.com/?s=${s}*&type=movie&page=1&apikey=bbde90f3`);\n    let searchResults = response.data.Search;\n    if (searchResults) {\n      const titles = [];\n      for (const item of searchResults) {\n        titles.push(item.Title);\n      }\n      setTypeAheadResults(titles);\n    } else {\n      setTypeAheadResults([`no results for \"${searchText}\"`]);\n    }\n  };\n  let runNewTypeAhead = false;\n  let typeAheadTimeOut;\n\n  useEffect(() => {\n    const handleTextChange = (s) => {\n      runNewTypeAhead = true;\n      // debounce: Grouping a sudden burst of events (like keystrokes) into a single one.\n      // how would you implment that? how would you group that burst?\n      // wait 3 seconds, double check that last search term is different from current search term, then run getTypeAheadResults\n      if (typeAheadTimeOut) clearTimeout(typeAheadTimeOut);\n      typeAheadTimeOut = setTimeout(() => {\n        if (runNewTypeAhead) {\n          runNewTypeAhead = false;\n          getTypeAheadResults(s);\n        }\n      }, 200);\n      // TODO adjust this test code which only allows additional search if entire text is deleted\n      // search only runs again if the search terms is deleted entirely before something new is\n      // TODO need conditions to check \n      // 1) when to run first search \n      // 2) when to rerun search \n      // 3) variable to track if current searchText returns a result\n    };\n    // code to run when the prop searchText changes\n    handleTextChange(searchText);\n    return () => {\n      clearTimeout(typeAheadTimeOut);\n    }\n    // this will run getTypeAhead with every single keystroke (even backspaces - how do I change this to only run once every few seconds?)\n  }, [searchText, typeAheadTimeOut]);\n\n  const results = typeAheadResults.map((title, index) => {\n    return (\n      <SearchBarResultItem\n        key={index}\n        title={title} />\n    )\n  });\n\n\n  return (\n    <div className='searchbar-results' >\n      {results}\n    </div>\n  );\n};\n\nexport default SearchBarResults;","import { React, useState } from 'react';\nimport SearchBarResults from './SearchBarResults'\n\nconst SearchBar = ({ getMovies }) => {\n\n  const [searchText, setSearchText] = useState('');\n  const [showTypeAhead, setShowTypeAhead] = useState(false);\n\n\n  return (\n    <div className='searchbar'>\n      <label className='searchlabel'>Find movies to nominate</label>\n      <div className='input-search-results-container'>\n        <input\n          placeholder='Type a movie title...'\n          id='search-text'\n          type='search'\n          name='search-text'\n          value={searchText}\n          //TODO the searches from Enter and Search button should only run if the text entered is new and has not been already displayed\n          //TODO the search should return only a limited amount of results, i think... not infinite scroll? or maybe it could if the infinite scroll stayed in a fixed area\n          //TODO (only run if there is a new search term)\n          onKeyUp={e => {\n            if (e.key === 'Enter' && searchText.trim().length) {\n              getMovies(searchText + '*', 1); // number 1 has to be used because if these buttons are being hit the user needs new results - not necessarily... if they hit it twice to start then they should get 2 pages?\n            }\n          }}\n          onChange={() => { setSearchText(document.getElementById('search-text').value) }\n          }\n          onBlur={() => setShowTypeAhead(false)}\n          onFocus={() => setShowTypeAhead(true)}\n        />\n        {/* TODO don't display SearchBarResults at all if nothing is typed in, or if there is a new text IS USING a ternary with null OK? */}\n\n        {searchText.trim().length > 2 && showTypeAhead ? <SearchBarResults\n          searchText={searchText.trim()}\n        /> : null}\n\n      </div>\n      <button onClick={() => {\n        if (searchText.trim().length) {\n          getMovies(searchText.trim() + '*', 1)\n        }\n      }}>Search</button>\n    </div>\n  );\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst Banner = () => {\n\n  return (\n    <div className='banner'>\n      <h4>You have selected the maximum of 5 nominees. If you would like to change your nominations, use the 'Remove' button.</h4>\n    </div>\n  );\n};\n\nexport default Banner;","import { React, useState } from 'react';\nimport './App.css';\nimport SearchList from './SearchList';\nimport NominationList from './NominationList';\nimport SearchBar from './SearchBar';\nimport Banner from './Banner';\nconst axios = require('axios');\n\n\nfunction App() {\n  // localStorage will hold user's nomination if they've visited website before\n  // go through each item in local storage. if the key is an imdbID, put it in the nominees array  \n  const localNoms = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    let key = localStorage.key(i);\n    let nom = localStorage[key];\n    if (key.match(/tt\\d{7}/g)) {\n      nom = JSON.parse(nom);\n      localNoms.push(nom)\n    }\n  }\n\n  const [movies, setMovies] = useState({});\n  const [noResults, setNoResults] = useState(false);\n  const [lastSearchTerm, setLastSearchTerm] = useState('');\n  const [nominees, setNominees] = useState(localNoms.length ? localNoms : []);\n  const [searchPage, setSearchPage] = useState(1);\n\n\n  const nominate = (Title, Year, imdbID, Poster) => {\n    const nominee = {\n      Title,\n      Year,\n      imdbID,\n      Poster\n    };\n    setNominees([...nominees, nominee]);\n\n    localStorage.setItem(imdbID, JSON.stringify(nominee));\n\n    for (let movie of movies) {\n      if (movie.imdbID === imdbID) {\n        movie.nominee = true;\n        break;\n      }\n    }\n  }\n\n  const remove = (idRemove) => {\n\n    for (let i = 0; i < localStorage.length; i++) {\n      let key = localStorage.key(i);\n      let nom = localStorage[key];\n      if (nom.includes(idRemove)) {\n        localStorage.removeItem(key);\n        break;\n      }\n    }\n\n    const newNomList = [];\n    for (let nominee of nominees) {\n      if (nominee.imdbID !== idRemove) {\n        newNomList.push(nominee);\n      }\n    }\n    if (movies.length) {\n      for (let movie of movies) {\n        if (movie.imdbID === idRemove) {\n          movie.nominee = false;\n          break;\n        }\n      }\n    }\n    setNominees(newNomList);\n  }\n\n  // get movies from database and set the results to searchResults\n  async function getMovies(searchTerm, pageToReturn) {\n    // the incoming pageToReturn informs us if the user has triggered a brand new search (even if the search is with the same search text as before)\n    if (pageToReturn === 1) {\n      setSearchPage(1);\n    }\n    try {\n      // TODO Hide API KEY\n      // the API only returns 10 results at a time\n      const response = await axios.get(`https://www.omdbapi.com/?s=${searchTerm}&type=movie&page=${pageToReturn}&apikey=bbde90f3`);\n      let searchResults = response.data.Search;\n      // TODO use the result count? total amount of results are known for a search term on the first query\n      // const resultCount = response.data.totalResults;\n\n      for (let item of searchResults) {\n        // TODO setting nominee causes console error and no results returned sometimes even though there should be results\n        if (item) {\n          item.nominee = false;\n          for (let nominee of nominees) {\n            if (item.imdbID === nominee.imdbID) {\n              item.nominee = true;\n            }\n          }\n        }\n      }\n      setLastSearchTerm(searchTerm.replace('*', '').trim());\n      if (pageToReturn === 1) {\n        // TODO calling getMovies also sets the results in the search area - should getting the results and setting them be seperated as getting results can be used differently \n        setMovies(searchResults);\n\n      } else {\n        searchResults = movies.concat(searchResults);\n        setMovies(searchResults);\n      }\n      setNoResults(!searchResults.length);\n    } catch (error) {\n      // TODO console error if search results not iterable; need message to user that they've reached the end of the results\n      console.error(error);\n    }\n  }\n\n\n  console.log('APP RENDER')\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Movie Awards</h1>\n        <img\n          className='shoppies-logo'\n          src=\"https://image.freepik.com/free-vector/popcorn-open-clapper-board-movie-reel-3d-glasses-tickets-illustration_185417-5.jpg\"\n          alt=\"movie-awards-logo\"\n        />\n\n        <SearchBar\n          getMovies={getMovies}\n          setMovies={setMovies}\n          searchPage={searchPage}\n          setSearchPage={setSearchPage} />\n\n\n        {nominees.length === 5 ?\n          <Banner /> : null}\n      </header>\n\n      {nominees.length ?\n        <NominationList\n          className='nom-container'\n          remove={remove}\n          nominees={nominees}\n        /> :\n        <div className='nom-container'>\n          Your nominations will appear here.\n      </div>}\n      {movies.length ?\n        <SearchList\n          className='search-container'\n          nominate={nominate}\n          movies={movies}\n          maxNomsReached={nominees.length === 5}\n          lastSearchTerm={lastSearchTerm}\n          getMovies={getMovies}\n          handlePageChange={(p) => {\n            setSearchPage(p);\n          }}\n          searchPage={searchPage}\n        /> :\n        noResults ?\n          <div className='search-container'>\n            Sorry, we could not find '{lastSearchTerm}'\n        </div> :\n          <div className='search-container'>\n            Search above to find movies!\n        </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}