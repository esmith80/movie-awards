{"version":3,"sources":["SearchListItem.jsx","SearchList.jsx","NominationListItem.jsx","NominationList.jsx","SearchBarResultItem.jsx","helpers.js","SearchBarResults.jsx","SearchBar.jsx","Banner.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchListItem","id","nominate","nominee","maxNomsReached","poster","title","year","onClick","disabled","SearchList","scrollLoop","movies","lastSearchTerm","getMovies","handlePageChange","searchPage","scrolling","lastOffPagePx","handleScroll","clearInterval","setInterval","offPagePxBelow","document","getElementById","scrollHeight","window","innerHeight","scrollY","useEffect","addEventListener","removeEventListener","searchListItems","i","length","push","imdbID","Title","Year","Poster","console","log","className","NominationListItem","remove","src","includes","alt","NominationList","nominees","nomListItems","SearchBarResultItem","setSearchText","setShowTypeAhead","searchText","startsWith","removeCharsAndSpaces","string","disallowedChars","result","badChar","regex","RegExp","replace","removeExtraSpaces","SearchBarResults","setInTypeAhead","useState","typeAheadResults","setTypeAheadResults","s","a","axios","get","response","searchResults","data","Search","titles","item","typeAheadTimeOut","runNewTypeAhead","clearTimeout","setTimeout","getTypeAheadResults","results","map","index","onMouseEnter","onMouseLeave","SearchBar","showTypeAhead","inTypeAhead","onBlur","onFocus","placeholder","type","name","value","onKeyUp","e","key","trim","onChange","Banner","require","App","localNoms","localStorage","nom","match","JSON","parse","setMovies","noResults","setNoResults","setLastSearchTerm","setNominees","setSearchPage","searchTerm","pageToReturn","concat","error","idRemove","removeItem","newNomList","movie","setItem","stringify","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0027fa3d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const SearchListItem = ({ id, nominate, nominee, maxNomsReached, poster, title, year }) => {\n\n  return (\n    <>\n      <tr>\n        <td>{title}</td>\n        <td>{year}</td>\n        <td>\n          <button\n            onClick={() => {\n              nominate(title, year, id, poster);\n            }}\n            disabled={nominee || maxNomsReached}>{nominee ? 'üèÜ' : 'Nominate'}\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};","import React, { useEffect } from 'react';\nimport { SearchListItem } from './SearchListItem';\n\nfunction SearchList({ nominate, movies, maxNomsReached, lastSearchTerm, getMovies, handlePageChange, searchPage }) {\n\n  let scrolling = false;\n  let scrollLoop;\n  let lastOffPagePx = 0;\n\n  function handleScroll() {\n    scrolling = true;\n    // TODO have this code reviewed - is this the way to implement clearing the interval (included of logic of cancelling the event handler and also clearing it if a new one is to be set up?)\n    if (scrollLoop) clearInterval(scrollLoop);\n    scrollLoop = setInterval(() => {\n      if (scrolling) {\n        scrolling = false;\n        // pageHeight is entire height of the page (even if it's off screen)\n        const pageHeight = document.getElementById('root').scrollHeight;\n        const offPagePxBelow = pageHeight - window.innerHeight - window.scrollY;\n        lastOffPagePx = offPagePxBelow;\n\n        // lastOffPagePx condition is so event only triggers when scrolling down\n        if (offPagePxBelow < 10 && offPagePxBelow <= lastOffPagePx) {\n          getMovies(lastSearchTerm + '*', searchPage + 1);\n          // TODO reset search page if movie results\n          handlePageChange(searchPage + 1);\n        }\n      }\n    }, 250);\n\n  }\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    // returning the cleanup function will ensure that next time this useEffect runs, the cleanup function from the previous render will already be available to remove the listener??\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n      clearInterval(scrollLoop);\n    }\n  });\n\n  // TODO possible refactor - why build this each time, can't we just pass down an array?\n  const searchListItems = [];\n  for (let i = 0; i < movies.length; i++) {\n    // make an arry of SearchListItems\n    if (movies[i]) {\n      searchListItems.push(\n        <SearchListItem\n          key={i}\n          id={movies[i].imdbID}\n          title={movies[i].Title}\n          year={movies[i].Year}\n          poster={movies[i].Poster}\n          nominate={nominate}\n          nominee={movies[i].nominee}\n          maxNomsReached={maxNomsReached}\n        />);\n    }\n  }\n  console.log('SEARCH LIST RENDER')\n\n  return (\n    <div className='search-container'>\n      <table>\n        <tbody>\n          {searchListItems}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default SearchList;","import React from 'react';\n\nexport const NominationListItem = ({ poster, remove, imdbID, title }) => {\n\n  return (\n    <>\n      <div className='nom-item'>\n        <img className='poster' src={(poster.includes('jpg')) ? poster : 'https://www.kirkstall.com/wp-content/uploads/2020/04/image-not-available-png-8.png'} alt={title} />\n        <button className='nom-button' onClick={() => { remove(imdbID) }}>Remove</button>\n      </div>\n    </>\n  );\n};","import React from 'react';\nimport { NominationListItem } from './NominationListItem';\n\nfunction NominationList({ remove, nominees }) {\n\n  const nomListItems = [];\n  for (let i = 0; i < nominees.length; i++) {\n    // make an arry of nomListItems\n    nomListItems.push(\n      <NominationListItem\n        key={i}\n        imdbID={nominees[i].imdbID}\n        title={nominees[i].Title}\n        year={nominees[i].Year}\n        poster={nominees[i].Poster}\n        remove={remove}\n      />);\n  }\n\n  return (\n    <div className='nom-container'>\n      {nomListItems}\n    </div>\n  );\n};\n\nexport default NominationList;","import React from 'react';\n\nconst SearchBarResultItem = ({ title, setSearchText, getMovies, searchText, setShowTypeAhead }) => {\n  return (\n    <div className='searchbar-result-item'\n      onClick={() => {\n        if (!title.startsWith(\"no results for \")) setSearchText(title);\n        // TODO if the title contains certain characters (minus sign, ampersand, it will return no search results) state here, search text that is clicked is not the actual movie\n        getMovies(title, 1);\n        setShowTypeAhead(false);\n      }}\n    >\n\n      { title}\n    </div>\n  );\n};\n\nexport default SearchBarResultItem;","const removeExtraSpaces = (string) => {\n  return string.replace(/ {2,}/g, ' ')\n\n}\n\n// takes a string and an array of characters that need to be removed from the string\n// returns the string without those characters\nconst removeCharsAndSpaces = (string, disallowedChars) => {\n  let result = string;\n  for (let badChar of disallowedChars) {\n    // TODO if character is + or * or other special regex character, breaks function\n    let regex = new RegExp(`${badChar}`, 'g');\n    result = result.replace(regex, '');\n  }\n  result = removeExtraSpaces(result);\n  return result;\n\n};\n\nexport default removeCharsAndSpaces;","import { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport SearchBarResultItem from './SearchBarResultItem';\nimport removeCharsAndSpaces from './helpers';\n\n\nfunction SearchBarResults({ searchText, setSearchText, setShowTypeAhead, getMovies, setInTypeAhead }) { // will this component automatically re render when searchText is changed?\n\n  const [typeAheadResults, setTypeAheadResults] = useState([]);\n\n\n  async function getTypeAheadResults(s) {\n    s = removeCharsAndSpaces(s, ['&', '-']);\n\n    console.log('call API - searchText: ', searchText)\n    // TODO Hide API KEY\n    // the API only returns 10 results at a time\n    const response = await axios.get(`https://www.omdbapi.com/?s=${s}*&type=movie&page=1&apikey=bbde90f3`);\n    let searchResults = response.data.Search;\n    if (searchResults) {\n      const titles = [];\n      for (const item of searchResults) {\n        titles.push(item.Title);\n      }\n      setTypeAheadResults(titles);\n    } else {\n      setTypeAheadResults([`no results for \"${searchText}\"`]);\n    }\n  };\n  let runNewTypeAhead = false;\n  let typeAheadTimeOut;\n\n  useEffect(() => {\n    const handleTextChange = (s) => {\n      runNewTypeAhead = true;\n      // debounce: Grouping a sudden burst of events (like keystrokes) into a single one.\n      // how would you implment that? how would you group that burst?\n      // wait 3 seconds, double check that last search term is different from current search term, then run getTypeAheadResults\n      if (typeAheadTimeOut) clearTimeout(typeAheadTimeOut);\n      typeAheadTimeOut = setTimeout(() => {\n        if (runNewTypeAhead) {\n          runNewTypeAhead = false;\n          getTypeAheadResults(s);\n        }\n      }, 200);\n      // TODO adjust this test code which only allows additional search if entire text is deleted\n      // search only runs again if the search terms is deleted entirely before something new is\n      // TODO need conditions to check \n      // 1) when to run first search \n      // 2) when to rerun search \n      // 3) variable to track if current searchText returns a result\n    };\n    // code to run when the prop searchText changes\n    handleTextChange(searchText);\n    return () => {\n      clearTimeout(typeAheadTimeOut);\n    }\n    // this will run getTypeAhead with every single keystroke (even backspaces - how do I change this to only run once every few seconds?)\n  }, [searchText, typeAheadTimeOut]);\n\n  const results = typeAheadResults.map((title, index) => {\n    return (\n      <SearchBarResultItem\n        key={index}\n        title={title}\n        setSearchText={setSearchText}\n        setInTypeAhead={setInTypeAhead}\n        setShowTypeAhead={setShowTypeAhead}\n        getMovies={getMovies}\n        searchText={searchText}\n      />\n    )\n  });\n\n\n  return (\n    <>\n      <div\n        className='searchbar-results'\n        onMouseEnter={() => {\n          console.log('onMouseEnter');\n          setInTypeAhead(true);\n        }}\n        onMouseLeave={() => {\n          console.log('onMouseLeave');\n          setInTypeAhead(false);\n        }}\n      >\n        {results}\n      </div>\n    </>\n  );\n};\n\nexport default SearchBarResults;","import { React, useState } from 'react';\nimport SearchBarResults from './SearchBarResults'\n\nconst SearchBar = ({ getMovies }) => {\n\n  const [searchText, setSearchText] = useState('');\n  const [showTypeAhead, setShowTypeAhead] = useState(false);\n  const [inTypeAhead, setInTypeAhead] = useState(false);\n\n  return (\n    <div className='searchbar'>\n      {/* <label className='searchlabel'>Find movies to nominate</label> */}\n      <div className='input-search-results-container'\n        onBlur={() => {\n          console.log('inTypeAhead is: ', inTypeAhead)\n          if (!inTypeAhead) setShowTypeAhead(false);\n          console.log('onBlur fired')\n        }} // if you hideTypeAhead onBlur the instant you leave the search input field, you lose the typeahead results and so you can't click on them\n        onFocus={() => {\n          setShowTypeAhead(true)\n          console.log('onFocus fired');\n        }}\n\n      >\n        <input\n          placeholder='Search for a movie to nominate...'\n          id='search-text'\n          type='search'\n          name='search-text'\n          value={searchText}\n          //TODO the searches from Enter and Search button should only run if the text entered is new and has not been already displayed\n          //TODO the search should return only a limited amount of results, i think... not infinite scroll? or maybe it could if the infinite scroll stayed in a fixed area\n          //TODO (only run if there is a new search term)\n          onKeyUp={e => {\n            if (e.key === 'Enter' && searchText.trim().length) {\n              getMovies(searchText + '*', 1); // number 1 has to be used because if these buttons are being hit the user needs new results - not necessarily... if they hit it twice to start then they should get 2 pages?\n            }\n          }}\n          onChange={() => { setSearchText(document.getElementById('search-text').value) }\n          }\n        />\n        {/* TODO don't display SearchBarResults at all if nothing is typed in, or if there is a new text IS USING a ternary with null OK? */}\n        {searchText.trim().length > 2 && showTypeAhead ? <SearchBarResults\n          setSearchText={setSearchText}\n          searchText={searchText.trim()}\n          setShowTypeAhead={setShowTypeAhead}\n          getMovies={getMovies}\n          setInTypeAhead={setInTypeAhead}\n        /> : null}\n\n      </div>\n      <button onClick={() => {\n        if (searchText.trim().length) {\n          getMovies(searchText.trim() + '*', 1)\n        }\n      }}>Search</button>\n    </div>\n  );\n};\n\nexport default SearchBar;","import React from 'react';\n\nconst Banner = () => {\n\n  return (\n    <div className='banner'>\n      <h4>You have selected the maximum of 5 nominees. If you would like to change your nominations, use the 'Remove' button.</h4>\n    </div>\n  );\n};\n\nexport default Banner;","import { React, useState } from 'react';\nimport './App.css';\nimport SearchList from './SearchList';\nimport NominationList from './NominationList';\nimport SearchBar from './SearchBar';\nimport Banner from './Banner';\nimport removeCharsAndSpaces from './helpers';\nconst axios = require('axios');\n\n\nfunction App() {\n  // localStorage will hold user's nomination if they've visited website before\n  // go through each item in local storage. if the key is an imdbID, put it in the nominees array  \n  const localNoms = [];\n  for (let i = 0; i < localStorage.length; i++) {\n    let key = localStorage.key(i);\n    let nom = localStorage[key];\n    if (key.match(/tt\\d{7}/g)) {\n      nom = JSON.parse(nom);\n      localNoms.push(nom)\n    }\n  }\n\n  const [movies, setMovies] = useState({});\n  const [noResults, setNoResults] = useState(false);\n  const [lastSearchTerm, setLastSearchTerm] = useState('');\n  const [nominees, setNominees] = useState(localNoms.length ? localNoms : []);\n  const [searchPage, setSearchPage] = useState(1);\n\n\n  const nominate = (Title, Year, imdbID, Poster) => {\n    const nominee = {\n      Title,\n      Year,\n      imdbID,\n      Poster\n    };\n    setNominees([...nominees, nominee]);\n\n    localStorage.setItem(imdbID, JSON.stringify(nominee));\n\n    for (let movie of movies) {\n      if (movie.imdbID === imdbID) {\n        movie.nominee = true;\n        break;\n      }\n    }\n  }\n\n  const remove = (idRemove) => {\n\n    for (let i = 0; i < localStorage.length; i++) {\n      let key = localStorage.key(i);\n      let nom = localStorage[key];\n      if (nom.includes(idRemove)) {\n        localStorage.removeItem(key);\n        break;\n      }\n    }\n\n    const newNomList = [];\n    for (let nominee of nominees) {\n      if (nominee.imdbID !== idRemove) {\n        newNomList.push(nominee);\n      }\n    }\n    if (movies.length) {\n      for (let movie of movies) {\n        if (movie.imdbID === idRemove) {\n          movie.nominee = false;\n          break;\n        }\n      }\n    }\n    setNominees(newNomList);\n  }\n\n  // get movies from database and set the results to searchResults\n  async function getMovies(searchTerm, pageToReturn) {\n    searchTerm = removeCharsAndSpaces(searchTerm, ['&', '-']);\n    // the incoming pageToReturn informs us if the user has triggered a brand new search (even if the search is with the same search text as before)\n    if (pageToReturn === 1) {\n      setSearchPage(1);\n    }\n    try {\n      // TODO Hide API KEY\n      // the API only returns 10 results at a time\n      const response = await axios.get(`https://www.omdbapi.com/?s=${searchTerm}&type=movie&page=${pageToReturn}&apikey=bbde90f3`);\n      let searchResults = response.data.Search;\n      // TODO use the result count? total amount of results are known for a search term on the first query\n      // const resultCount = response.data.totalResults;\n\n      // TODO if no results, search results is not iterable\n      for (let item of searchResults) {\n        // TODO setting nominee causes console error and no results returned sometimes even though there should be results\n        if (item) {\n          item.nominee = false;\n          for (let nominee of nominees) {\n            if (item.imdbID === nominee.imdbID) {\n              item.nominee = true;\n            }\n          }\n        }\n      }\n      setLastSearchTerm(searchTerm.replace('*', '').trim());\n      if (pageToReturn === 1) {\n        // TODO calling getMovies also sets the results in the search area - should getting the results and setting them be seperated as getting results can be used differently \n        setMovies(searchResults);\n\n      } else {\n        searchResults = movies.concat(searchResults);\n        setMovies(searchResults);\n      }\n      setNoResults(!searchResults.length);\n    } catch (error) {\n      // TODO console error if search results not iterable; need message to user that they've reached the end of the results\n      console.error(error);\n    }\n  }\n\n\n  console.log('APP RENDER')\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Movie Awards</h1>\n        {/* TODO logo may go here at one point */}\n        {/* <img\n          className='awards-logo'\n          src=\"https://image.freepik.com/free-vector/popcorn-open-clapper-board-movie-reel-3d-glasses-tickets-illustration_185417-5.jpg\"\n          alt=\"movie-awards-logo\"\n        /> */}\n\n        <SearchBar\n          getMovies={getMovies}\n          setMovies={setMovies}\n          searchPage={searchPage}\n          setSearchPage={setSearchPage} />\n\n\n        {nominees.length === 5 ?\n          <Banner /> : null}\n      </header>\n\n      {nominees.length ?\n        <NominationList\n          className='nom-container'\n          remove={remove}\n          nominees={nominees}\n        /> :\n        <div className='nom-container'>\n        </div>}\n      {movies.length ?\n        <SearchList\n          className='search-container'\n          nominate={nominate}\n          movies={movies}\n          maxNomsReached={nominees.length === 5}\n          lastSearchTerm={lastSearchTerm}\n          getMovies={getMovies}\n          handlePageChange={(p) => {\n            setSearchPage(p);\n          }}\n          searchPage={searchPage}\n        /> :\n        noResults ?\n          <div className='search-container'>\n            Sorry, we could not find '{lastSearchTerm}'\n        </div> :\n          <div className='search-container'>\n\n          </div>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}